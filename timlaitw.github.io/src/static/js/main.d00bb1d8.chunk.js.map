{"version":3,"sources":["serviceWorker.js","views/About.js","data/contact.js","views/Contact.js","data/routes.js","components/Template/Header.js","views/Index.js","views/NotFound.js","views/Projects.js","views/Resume.js","views/Status.js","index.js"],"names":["Boolean","window","location","hostname","match","About","data","link","label","icon","faGithub","faLinkedinIn","faFacebookF","faInstagram","faEnvelope","Contact","className","href","map","item","key","path","index","Header","id","routes","filter","l","to","Home","PageNotFound","Projects","Resume","Status","ReactDOM","render","StrictMode","exact","component","Index","NotFound","status","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0PAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCjBN,IAKeC,EALD,WACZ,OACI,6BAAK,uC,uBC8BIC,EA5BF,CACT,CACIC,KAAM,8BACNC,MAAO,SACPC,KAAMC,KAEV,CACIH,KAAM,0CACNC,MAAO,WACPC,KAAME,KAEV,CACIJ,KAAM,qCACNC,MAAO,WACPC,KAAMG,KAEV,CACIL,KAAM,uCACNC,MAAO,YACPC,KAAMI,KAEV,CACIN,KAAM,8BACNC,MAAO,QACPC,KAAMK,MCHCC,EAvBC,WACd,OACE,oCACE,6BACE,wCAEF,yBAAKC,UAAU,YACX,6EAAmD,IACjD,uBAAGC,KAAK,+BAAR,QADF,WAIJ,wBAAID,UAAU,SACbV,EAAKY,KAAI,SAACC,GAAD,OACR,wBAAIC,IAAKD,EAAKX,OACZ,uBAAGS,KAAME,EAAKZ,MACZ,kBAAC,IAAD,CAAiBE,KAAMU,EAAKV,eCSzBH,EA3BF,CACT,CACIe,KAAM,IACNb,MAAO,cACPc,OAAO,GAEX,CACID,KAAM,SACNb,MAAO,SAEX,CACIa,KAAM,UACNb,MAAO,UAEX,CACIa,KAAM,YACNb,MAAO,YAEX,CACIa,KAAM,SACNb,MAAO,SAEX,CACIa,KAAM,WACNb,MAAO,YCFEe,EAnBF,kBACX,4BAAQC,GAAG,UACT,wBAAIR,UAAU,cACXS,EAAOC,QAAO,SAACC,GAAD,OAAOA,EAAEL,SAAOJ,KAAI,SAACS,GAAD,OACjC,kBAAC,IAAD,CAAMP,IAAKO,EAAEnB,MAAOoB,GAAID,EAAEN,MAAOM,EAAEnB,WAGvC,yBAAKQ,UAAU,SACb,4BACGS,EAAOC,QAAO,SAACC,GAAD,OAAQA,EAAEL,SAAOJ,KAAI,SAACS,GAAD,OAClC,wBAAIP,IAAKO,EAAEnB,OACT,kBAAC,IAAD,CAAMoB,GAAID,EAAEN,MAAOM,EAAEnB,eCHpBqB,EATF,SAAC,GAAe,EAAd3B,SACb,OACE,6BACE,kBAAC,EAAD,MACA,+CACA,kDCGS4B,EAPM,kBACnB,yBAAKd,UAAU,aACb,+CACA,wCAAa,kBAAC,IAAD,CAAMY,GAAG,KAAT,SAAb,OCAWG,EALE,WACf,OACI,6BAAK,0CCGIC,EALA,WACb,OACI,6BAAK,wCCGIC,EALA,WACb,OACI,6BAAK,wCCYXC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAAChB,KAAK,IAAIiB,UAAWC,IACjC,kBAAC,IAAD,CAAOlB,KAAK,SAASiB,UAAWjC,IAChC,kBAAC,IAAD,CAAOgB,KAAK,YAAYiB,UAAWP,IACnC,kBAAC,IAAD,CAAOV,KAAK,UAAUiB,UAAWL,IACjC,kBAAC,IAAD,CAAOZ,KAAK,WAAWiB,UAAWvB,IAClC,kBAAC,IAAD,CAAOM,KAAK,UAAUiB,UAAWN,IAEjC,kBAAC,IAAD,CAAOM,UAAWE,EAAUC,OAAQ,SAIxCC,SAASC,eAAe,SXqGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d00bb1d8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nconst About = () => {\n  return (\n      <div><h1>About</h1></div>\n  )\n}\nexport default About;","import {faGithub} from '@fortawesome/free-brands-svg-icons';\nimport {faFacebookF} from '@fortawesome/free-brands-svg-icons';\nimport {faInstagram} from '@fortawesome/free-brands-svg-icons';\nimport {faLinkedinIn} from '@fortawesome/free-brands-svg-icons';\nimport {faEnvelope} from '@fortawesome/free-regular-svg-icons';\nconst data = [\n    {\n        link: 'https://github.com/timlaitw',\n        label: 'Github',\n        icon: faGithub,\n    },\n    {\n        link: 'https://www.linkedin.com/in/tailin-lai/',\n        label: 'Linkedin',\n        icon: faLinkedinIn,\n    },\n    {\n        link: 'https://www.facebook.com/tailin08/',\n        label: 'FaceBook',\n        icon: faFacebookF,\n    },\n    {\n        link: 'https://www.instagram.com/tailinlai/',\n        label: 'Instagram',\n        icon: faInstagram,\n    },\n    {\n        link: 'mailto:timlai1208@gmail.com',\n        label: 'Email',\n        icon: faEnvelope,\n    }\n]\n\nexport default data;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport data from '../data/contact';\nconst Contact = () => {\n  return (\n    <>\n      <div>\n        <h2>Contact</h2>\n      </div>\n      <div className=\"email-at\">\n          <p>Feel free to get in touch. You can email me at {\" \"}\n            <a href='mailto:timlai1208@gmail.com'>here</a>ÔºÅ\n          </p>\n        </div>\n      <ul className=\"icons\">\n      {data.map((item) => (\n        <li key={item.label}>\n          <a href={item.link}>\n            <FontAwesomeIcon icon={item.icon} />\n          </a>\n        </li>\n      ))}\n      </ul>\n    </>\n  )\n}\nexport default Contact;","const data = [\n    {\n        path: '/',\n        label: 'Tai-Lin Lai',\n        index: true,\n    },\n    {\n        path: '/about',\n        label: 'About',\n    },\n    {\n        path: '/resume',\n        label: 'Resume',\n    },    \n    {\n        path: '/projects',\n        label: 'Projects',\n    },\n    {\n        path: '/stats',\n        label: 'Stats',\n    },\n    {\n        path: '/contact',\n        label: 'Contact',\n    }\n];\nexport default data;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport routes from '../../data/routes';\nconst Header = () => (\n    <header id=\"header\">\n      <h1 className=\"index-link\">\n        {routes.filter((l) => l.index).map((l) => (\n          <Link key={l.label} to={l.path}>{l.label}</Link>\n        ))}\n      </h1>\n      <nav className=\"links\">\n        <ul>\n          {routes.filter((l) => !l.index).map((l) => (\n            <li key={l.label}>\n              <Link to={l.path}>{l.label}</Link>\n            </li>\n          ))}\n        </ul>\n      </nav>\n    </header>\n  );\n\n  export default Header;","import React from 'react';\nimport Header from '../components/Template/Header';\nconst Home = ({location}) => {\n  return (\n    <div>\n      <Header />\n      <h1>About This Site</h1>\n      <h2>Static HTML Page</h2>\n    </div>\n  )\n}\nexport default Home;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst PageNotFound = () => (\n  <div className=\"not-found\">\n    <h1>Page Not Found.</h1>\n    <p>Return to <Link to=\"/\">index</Link>.</p>\n  </div>\n);\n\nexport default PageNotFound;","import React from 'react';\nconst Projects = () => {\n  return (\n      <div><h1>Projects</h1></div>\n  )\n}\nexport default Projects;","import React from 'react';\nconst Resume = () => {\n  return (\n      <div><h1>Resume</h1></div>\n  )\n}\nexport default Resume;","import React from 'react';\nconst Status = () => {\n  return (\n      <div><h1>Status</h1></div>\n  )\n}\nexport default Status;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {\n  BrowserRouter as Router, Switch, Route,\n} from 'react-router-dom';\n\nimport * as serviceWorker from './serviceWorker';\nimport About from './views/About';\nimport Contact from './views/Contact';\nimport Index from './views/Index';\nimport NotFound from './views/NotFound';\nimport Projects from './views/Projects';\nimport Resume from './views/Resume';\nimport Status from './views/Status';\nReactDOM.render(\n  <React.StrictMode>\n  <Router>\n    <Switch>\n      <Route exact path=\"/\" component={Index} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/projects\" component={Projects} />\n      <Route path=\"/status\" component={Status} />\n      <Route path=\"/contact\" component={Contact} />\n      <Route path=\"/resume\" component={Resume} />\n      {/* Only useful in development mode */}\n      <Route component={NotFound} status={404} />\n    </Switch>\n  </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}